using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System;
using System.IO;


public class IBEOSensor : MonoBehaviour {

	public int angle = 20;
	public float step = 1;
	public float length = 50;
	//public bool actifRenderer = false;
	private TelemeterLaserData telemeterData;
	
//	public override void create (string nameCar, bool loc, MobileEntity entity, string path, bool start, PseudoDns pseudoDns)
//	{
//		base.create (nameCar, loc, entity, path, start, pseudoDns);
//		this.data=new TelemeterLaserData();
//		this.telemeterData=(TelemeterLaserData) this.data;
//	}
	
	
//	public override void send ()
//	{	
//		if (sServer != null) {
//			if(telemeterData.distances.Count>0){
//				float timeInSec = Mathf.Floor(Time.time); //time in seconds
//				float timeus = Time.time - Mathf.Floor(Time.time); // decimals in µ seconds
//				timeus *= 100000;
//				timeus = Mathf.Floor(timeus);
//				
//				sServer.writeToAll ((double)timeInSec);
//				sServer.writeToAll ((double)timeus);
//			}
//			
//			foreach (float x in telemeterData.distances) {
//				sServer.writeToAll ((double)(x * 100));
//			}
//		}
//		telemeterData.clear ();
//	}
	
	void Start () {
		transform.Rotate (0, ((int)angle / 2) + 1, 0);
		//telemeterData.clear ();
	}

	void Update() {
		for (int i = 0; i < angle; i++) {
			transform.Rotate (0, -step, 0);
			ray ();
		}
		transform.Rotate (0, angle, 0);
	}

	void ray () {
		RaycastHit hit = new RaycastHit ();

		if (Physics.Raycast (transform.position, transform.forward, out hit, length)) {
			GameObject sphere = GameObject.CreatePrimitive(PrimitiveType.Sphere);
			Collider coll = sphere.GetComponent<Collider>();
			coll.enabled = false;


			float angleY = (transform.eulerAngles.y) * Mathf.Deg2Rad;
			float angleZ = (transform.eulerAngles.z) * Mathf.Deg2Rad;

			float pointX = transform.position.x + hit.distance * Mathf.Cos(angleZ) * Mathf.Sin(angleY);
			float pointY = transform.position.y + hit.distance * Mathf.Sin (angleZ);
			float pointZ = transform.position.z + hit.distance * Mathf.Cos(angleZ) * Mathf.Cos(angleY);

			sphere.transform.position = new Vector3 (pointX, pointY, pointZ);

			//Debug.Log("Position : " +transform.position+" // Dist hit : " +hit.distance+ " // Impact : " +hit.point+ "X : " +pointX+" // Y : " +pointY+" // Z : " +pointZ );
			//telemeterData.Add(hit.distance);
			//dist = hit.distance;
		}
		else{
			//Debug.Log("Dist hit : " +length);
			//telemeterData.Add (length);
		}
	}
	
}

public class TelemeterLaserData {
	
	private List<float> lidarData = new List<float> ();

	public List<float> distances {
		get{return this.lidarData;}
		set{this.lidarData=value;}
	}
	
	public void clear() {
		this.lidarData.Clear();	
	}
	
	public void Add(float distance) {
		this.lidarData.Add(distance);
	}
	
}
